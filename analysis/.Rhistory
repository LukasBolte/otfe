se_choice_auto1 = sd(choice_auto1, na.rm = TRUE) / sqrt(n()),
avg_choice_auto2 = mean(choice_auto2, na.rm = TRUE),
sd_choice_auto2 = sd(choice_auto2, na.rm = TRUE),
se_choice_auto2 = sd(choice_auto2, na.rm = TRUE) / sqrt(n()),
avg_choice_wtp1 = mean(choice_wtp1, na.rm = TRUE),
sd_choice_wtp1 = sd(choice_wtp1, na.rm = TRUE),
se_choice_wtp1 = sd(choice_wtp1, na.rm = TRUE) / sqrt(n()),
avg_choice_wtp2 = mean(choice_wtp2, na.rm = TRUE),
sd_choice_wtp2 = sd(choice_wtp2, na.rm = TRUE),
se_choice_wtp2 = sd(choice_wtp2, na.rm = TRUE) / sqrt(n())
) %>%
ungroup()
# Plot for jobs_viewed
ggplot(avg_values, aes(x = factor(true.label), y = avg_jobs_viewed, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge for side-by-side bars
geom_errorbar(
aes(
ymin = avg_jobs_viewed - 1.96*se_jobs_viewed,
ymax = avg_jobs_viewed + 1.96*se_jobs_viewed
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Average Jobs Viewed by True Label and Final Label",
x = "True Label",
y = "Average Jobs Viewed",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +  # Thick line at y = 0
theme_minimal()
# Plot for jobs_applied
ggplot(avg_values, aes(x = factor(true.label), y = avg_jobs_applied, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge for side-by-side bars
geom_errorbar(
aes(
ymin = avg_jobs_applied - 1.96*se_jobs_applied,
ymax = avg_jobs_applied + 1.96*se_jobs_applied
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Average Jobs Applied by True Label and Final Label",
x = "True Label",
y = "Average Jobs Applied",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +  # Thick line at y = 0
theme_minimal()
# Compute median and IQR-based error bars
summary_values <- df_selected %>%
group_by(true.label, final.label) %>%
summarise(
median_jobs_viewed = median(jobs_viewed_N, na.rm = TRUE),
q1_jobs_viewed = quantile(jobs_viewed_N, 0.25, na.rm = TRUE),  # 25th percentile (Q1)
q3_jobs_viewed = quantile(jobs_viewed_N, 0.75, na.rm = TRUE),  # 75th percentile (Q3)
median_jobs_applied = median(jobs_applied_N, na.rm = TRUE),
q1_jobs_applied = quantile(jobs_applied_N, 0.25, na.rm = TRUE),  # 25th percentile (Q1)
q3_jobs_applied = quantile(jobs_applied_N, 0.75, na.rm = TRUE)   # 75th percentile (Q3)
)
# Plot for jobs_viewed using median
ggplot(summary_values, aes(x = factor(true.label), y = median_jobs_viewed, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
geom_errorbar(
aes(
ymin = q1_jobs_viewed,  # Lower bound (25th percentile)
ymax = q3_jobs_viewed   # Upper bound (75th percentile)
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Median Jobs Viewed by True Label and Final Label",
x = "True Label",
y = "Median Jobs Viewed",
fill = "Final Label"
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +
theme_minimal()
# Plot for jobs_applied using median
ggplot(summary_values, aes(x = factor(true.label), y = median_jobs_applied, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(
ymin = q1_jobs_applied,  # Lower bound (25th percentile)
ymax = q3_jobs_applied   # Upper bound (75th percentile)
),
position = position_dodge(width = 0.8),
width = 0.25
) +
labs(
title = "Median Jobs Applied by True Label and Final Label",
x = "True Label",
y = "Median Jobs Applied",
fill = "Final Label"
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +
theme_minimal()
# Histogram of the number of jobs applied
ggplot(df_selected, aes(x = jobs_applied_N)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Jobs Applied",
x = "Number of Jobs Applied",
y = "Frequency") +
theme_minimal()
# Histogram of the number of jobs viewed
ggplot(df_selected, aes(x = jobs_viewed_N)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Jobs Viewed",
x = "Number of Jobs Viewed",
y = "Frequency") +
theme_minimal()
ggplot(avg_values, aes(x = factor(true.label), y = avg_posting_time, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge for side-by-side bars
geom_errorbar(
aes(
ymin = avg_posting_time - 1.96*se_posting_time,
ymax = avg_posting_time + 1.96*se_posting_time
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Average Time on Job Postings by True Label and Final Label",
x = "True Label",
y = "Average Time on Job Postings",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +  # Thick line at y = 0
theme_minimal()
# Compute median and IQR-based error bars
summary_values <- df_selected %>%
group_by(true.label, final.label) %>%
summarise(
median_posting_time = median(posting_time, na.rm = TRUE),
q1_posting_time = quantile(posting_time, 0.25, na.rm = TRUE),  # 25th percentile (Q1)
q3_posting_time = quantile(posting_time, 0.75, na.rm = TRUE)   # 75th percentile (Q3)
)
# Plot using median and IQR
ggplot(summary_values, aes(x = factor(true.label), y = median_posting_time, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
geom_errorbar(
aes(
ymin = q1_posting_time,  # Lower bound (25th percentile)
ymax = q3_posting_time   # Upper bound (75th percentile)
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Median Time on Job Postings by True Label and Final Label",
x = "True Label",
y = "Median Time on Job Postings",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +
theme_minimal()
ggplot(avg_values, aes(x = factor(true.label), y = avg_choice_auto1, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge for side-by-side bars
geom_errorbar(
aes(
ymin = avg_choice_auto1 - 1.96*se_choice_auto1,
ymax = avg_choice_auto1 + 1.96*se_choice_auto1
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Probability of Choosing Auto-Apply by True Label and Final Label",
x = "True Label",
y = "Probability of Choosing Auto-Apply",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +  # Thick line at y = 0
theme_minimal()
ggplot(avg_values, aes(x = factor(true.label), y = avg_choice_wtp1, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge for side-by-side bars
geom_errorbar(
aes(
ymin = avg_choice_wtp1 - 1.96*se_choice_wtp1,
ymax = avg_choice_wtp1 + 1.96*se_choice_wtp1
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Mean WTP for Auto-Apply by True Label and Final Label",
x = "True Label",
y = "WTP for Auto-Apply",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +  # Thick line at y = 0
theme_minimal()
# Compute median and IQR-based error bars
summary_values <- df %>%
group_by(true.label, final.label) %>%
summarise(
median_choice_wtp1 = median(choice_wtp1, na.rm = TRUE),
q1_choice_wtp1 = quantile(choice_wtp1, 0.25, na.rm = TRUE),  # 25th percentile (Q1)
q3_choice_wtp1 = quantile(choice_wtp1, 0.75, na.rm = TRUE)   # 75th percentile (Q3)
)
# Plot using median and IQR
ggplot(summary_values, aes(x = factor(true.label), y = median_choice_wtp1, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
geom_errorbar(
aes(
ymin = q1_choice_wtp1,  # Lower bound (25th percentile)
ymax = q3_choice_wtp1   # Upper bound (75th percentile)
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Median WTP for Auto-Apply by True Label and Final Label",
x = "True Label",
y = "WTP for Auto-Apply",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +
theme_minimal()
ggplot(avg_values, aes(x = factor(true.label), y = avg_choice_auto2, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge for side-by-side bars
geom_errorbar(
aes(
ymin = avg_choice_auto2 - 1.96*se_choice_auto2,
ymax = avg_choice_auto2 + 1.96*se_choice_auto2
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Probability of Choosing Auto-Apply by True Label and Final Label",
x = "True Label",
y = "Probability of Choosing Auto-Apply",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +  # Thick line at y = 0
theme_minimal()
ggplot(avg_values, aes(x = factor(true.label), y = avg_choice_wtp2, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Dodge for side-by-side bars
geom_errorbar(
aes(
ymin = avg_choice_wtp2 - (1.96*se_choice_wtp2),  # 95% CI lower bound
ymax = avg_choice_wtp2 + (1.96*se_choice_wtp2)   # 95% CI upper bound
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Mean WTP for Auto-Apply by True Label and Final Label",
x = "True Label",
y = "WTP for Auto-Apply",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +  # Thick line at y = 0
theme_minimal()
# Compute median and IQR-based error bars
summary_values <- df_selected %>%
group_by(true.label, final.label) %>%
summarise(
median_choice_wtp2 = median(choice_wtp2, na.rm = TRUE),
q1 = quantile(choice_wtp2, 0.25, na.rm = TRUE),  # First quartile (25th percentile)
q3 = quantile(choice_wtp2, 0.75, na.rm = TRUE)   # Third quartile (75th percentile)
)
# Plot with median and IQR-based error bars
ggplot(summary_values, aes(x = factor(true.label), y = median_choice_wtp2, fill = final.label)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
geom_errorbar(
aes(
ymin = q1,   # Lower bound (25th percentile)
ymax = q3    # Upper bound (75th percentile)
),
position = position_dodge(width = 0.8),  # Match bar dodge position
width = 0.25  # Error bar width
) +
labs(
title = "Median WTP for Auto-Apply by True Label and Final Label",
x = "True Label",
y = "WTP for Auto-Apply",
fill = "Final Label"  # Legend title
) +
geom_hline(yintercept = 0, color = "black", size = 1.5) +  # Thick line at y = 0
theme_minimal()
# Helper function to compute effect size (Cohen's d)
compute_effect_size <- function(data, variable_name, true_label_value) {
m1 <- data[[variable_name]][data$final.label == "better" & data$true.label == true_label_value]
m2 <- data[[variable_name]][data$final.label == "worse" & data$true.label == true_label_value]
n1 <- data$n[data$final.label == "better" & data$true.label == true_label_value]
n2 <- data$n[data$final.label == "worse" & data$true.label == true_label_value]
sd1 <- data[[variable_name]][data$final.label == "better" & data$true.label == true_label_value]
sd2 <- data[[variable_name]][data$final.label == "worse" & data$true.label == true_label_value]
# Compute Cohen's d with pooled SD
d_value <- (m1 - m2) / sqrt(((n1 - 1) * sd1^2 + (n2 - 1) * sd2^2) / (n1 + n2 - 2))
return(d_value)
}
# Function for power analysis with unbalanced sample sizes
power_analysis_function <- function(data, variable_name, sample_range = seq(10, 200, by = 5), imbalance_ratio = 9/11) {
# Compute effect sizes for both groups
d_1 <- compute_effect_size(data, variable_name, "better")
d_2 <- compute_effect_size(data, variable_name, "worse")
print(paste("Power Analysis for Effect Size (True Label = Better):", d_1))
print(paste("Power Analysis for Effect Size (True Label = Worse):", d_2))
# Function to perform power analysis for a given effect size
perform_power_analysis <- function(d_value, true_label) {
power_data <- data.frame(
sample_size = sample_range,
power_level = NA,
true_label = true_label
)
for (i in 1:nrow(power_data)) {
n1 <- power_data$sample_size[i]
n2 <- ceiling(n1 * imbalance_ratio)  # Unbalanced sample size adjustment
power_data$power_level[i] <- pwr.t2n.test(
n1 = n1,
n2 = n2,
d = d_value,
sig.level = 0.05,
alternative = "two.sided"
)$power
}
return(power_data)
}
# Run power analysis for both "better" and "worse" conditions
power_analysis1 <- perform_power_analysis(d_1, "better")
power_analysis2 <- perform_power_analysis(d_2, "worse")
# Combine results
power_results <- rbind(power_analysis1, power_analysis2)
return(power_results)
}
power_results <- power_analysis_function(avg_values, "avg_jobs_applied")
ggplot(power_results, aes(x = sample_size, y = power_level, color = true_label)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "darkgray") +
scale_color_manual(values = c("better" = "blue", "worse" = "red")) +
labs(
title = "Power Analysis for Average Jobs Applied",
x = "Sample Size (per group)",
y = "Statistical Power",
color = "Group"
) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
theme_minimal() +
theme(legend.position = "bottom")
power_results <- power_analysis_function(avg_values, "avg_jobs_viewed")
ggplot(power_results, aes(x = sample_size, y = power_level, color = true_label)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "darkgray") +
scale_color_manual(values = c("better" = "blue", "worse" = "red")) +
labs(
title = "Power Analysis for Average Jobs Viewed",
x = "Sample Size (per group)",
y = "Statistical Power",
color = "Group"
) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
theme_minimal() +
theme(legend.position = "bottom")
power_results <- power_analysis_function(avg_values, "avg_posting_time")
ggplot(power_results, aes(x = sample_size, y = power_level, color = true_label)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "darkgray") +
scale_color_manual(values = c("better" = "blue", "worse" = "red")) +
labs(
title = "Power Analysis for Average Time on Job Postings",
x = "Sample Size (per group)",
y = "Statistical Power",
color = "Group"
) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
theme_minimal() +
theme(legend.position = "bottom")
power_results <- power_analysis_function(avg_values, "avg_choice_auto1")
ggplot(power_results, aes(x = sample_size, y = power_level, color = true_label)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "darkgray") +
scale_color_manual(values = c("better" = "blue", "worse" = "red")) +
labs(
title = "Power Analysis for Probablity of Choosing Auto-Apply (Choice 1) Differences Between Final Labels",
x = "Sample Size (per group)",
y = "Statistical Power",
color = "Group"
) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
theme_minimal() +
theme(legend.position = "bottom")
power_results <- power_analysis_function(avg_values, "avg_choice_auto2")
ggplot(power_results, aes(x = sample_size, y = power_level, color = true_label)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "darkgray") +
scale_color_manual(values = c("better" = "blue", "worse" = "red")) +
labs(
title = "Power Analysis for Probablity of Choosing Auto-Apply (Choice 2) Differences Between Final Labels",
x = "Sample Size (per group)",
y = "Statistical Power",
color = "Group"
) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
theme_minimal() +
theme(legend.position = "bottom")
power_results <- power_analysis_function(avg_values, "avg_choice_wtp1")
ggplot(power_results, aes(x = sample_size, y = power_level, color = true_label)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "darkgray") +
scale_color_manual(values = c("better" = "blue", "worse" = "red")) +
labs(
title = "Power Analysis for WTP (Choice 1) Differences Between Final Labels",
x = "Sample Size (per group)",
y = "Statistical Power",
color = "Group"
) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
theme_minimal() +
theme(legend.position = "bottom")
power_results <- power_analysis_function(avg_values, "avg_choice_wtp2")
ggplot(power_results, aes(x = sample_size, y = power_level, color = true_label)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.8, linetype = "dashed", color = "darkgray") +
scale_color_manual(values = c("better" = "blue", "worse" = "red")) +
labs(
title = "Power Analysis for WTP (Choice 2) Differences Between Final Labels",
x = "Sample Size (per group)",
y = "Statistical Power",
color = "Group"
) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +
theme_minimal() +
theme(legend.position = "bottom")
variable_list <- c("avg_jobs_applied", "avg_jobs_viewed", "avg_posting_time", "avg_choice_auto1", "avg_choice_auto2", "avg_choice_wtp1", "avg_choice_wtp2")
effect_size_table <- data.frame(variable = variable_list, effect_size1 = NA, effect_size2 = NA, total_sample = NA)
# Drop "avg_" from variable names
effect_size_table$variable <- gsub("^avg_", "", effect_size_table$variable)
for (i in 1:length(variable_list)) {
var <- variable_list[i]
# Compute the effect size for "better" and "worse"
effect_size_table$effect_size1[i] <- compute_effect_size(avg_values, var, "better")
effect_size_table$effect_size2[i] <- compute_effect_size(avg_values, var, "worse")
}
effect_size_table <- effect_size_table %>%
pivot_longer(cols = c(effect_size1, effect_size2),
names_to = "true.label",
values_to = "effect_size") %>%
mutate(true.label = recode(true.label,
"effect_size1" = "Better",
"effect_size2" = "Worse"))
# Loop through effect sizes
for (i in 1:nrow(effect_size_table)) {
effect_size <- effect_size_table$effect_size[[i]]
# Check if effect size is within a reasonable range
if (abs(effect_size) < 0.01 || abs(effect_size) > 1.5) {
warning(paste("Skipping effect size", effect_size, "for index", i))
next  # Skip this iteration if effect size is too extreme
}
# Proceed with sample size calculation if effect size is valid
ratio <- 11/9
result <- tryCatch({
pwr.t.test(d = effect_size, power = 0.8, sig.level = 0.05, type = "two.sample")
}, error = function(e) {
warning("Error in pwr.t.test for effect size:", effect_size)
return(NULL)
})
if (!is.null(result)) {
n1 <- ceiling(result$n)
n2 <- ceiling(n1 * ratio)
effect_size_table$total_sample[[i]] <- n1 + n2
}
}
# Define effect sizes
effect_sizes <- c(seq(-1.5, -0.2, by = 0.01), seq(0.2, 1.5, by = 0.01))
# Define imbalance ratio (e.g., group 2 has 1.5x the size of group 1)
ratio <- 11/9  # Change this as needed
# Create dataframe to store sample sizes
sample_sizes <- data.frame(
effect_size = effect_sizes,
sample_size_n1 = NA,  # Sample size of smaller group
sample_size_n2 = NA,  # Sample size of larger group
total_sample = NA  # Total required sample size
)
# Loop through effect sizes
for (i in 1:length(effect_sizes)) {
# Start with an estimated n1 (balanced assumption)
result <- pwr.t.test(d = effect_sizes[i], power = 0.8, sig.level = 0.05, type = "two.sample")
# Compute adjusted sample sizes for unbalanced case
n1 <- ceiling(result$n)  # Use calculated n as starting point
n2 <- ceiling(n1 * ratio)  # Compute n2 based on the ratio
# Compute actual power for these unbalanced sample sizes
power_result <- pwr.t2n.test(n1 = n1, n2 = n2, d = effect_sizes[i], sig.level = 0.05)
# Store results
sample_sizes$sample_size_n1[i] <- n1
sample_sizes$sample_size_n2[i] <- n2
sample_sizes$total_sample[i] <- n1 + n2
}
# Print results
print(sample_sizes)
# Plot sample size requirements by effect size, with color based on group type
ggplot(sample_sizes, aes(x = effect_size, y = total_sample)) +
geom_line(size = 1) +  # Line plot
geom_point(data = effect_size_table,  # Adding points from effect_size_table
aes(x = effect_size, y = total_sample, color = true.label),
size = 3, shape = 16) +  # Customize the point size and shape
geom_text(data = effect_size_table,
aes(x = effect_size, y = total_sample, label = variable),
vjust = -1, hjust = 0.8, size = 2.5) +  # Add labels above the points
scale_color_manual(values = c("Better" = "blue", "Worse" = "red")) +  # Adjust colors
scale_y_continuous(breaks = seq(0, 800, by = 50)) +  # Y-axis breaks
labs(
title = "Required Sample Size by Effect Size (80% Power, Unbalanced Groups)",
x = "Effect Size (Cohen's d)",
y = "Total Sample Size Required",
color = "True Label"
) +
theme_minimal()
